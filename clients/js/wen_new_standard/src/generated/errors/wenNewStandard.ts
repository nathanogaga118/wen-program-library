/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

/** InvalidFreezeAuthority: Invalid freeze authority. */
export const WEN_NEW_STANDARD_ERROR__INVALID_FREEZE_AUTHORITY = 0x1770; // 6000
/** InvalidDelegateAuthority: Invalid delegate authority. */
export const WEN_NEW_STANDARD_ERROR__INVALID_DELEGATE_AUTHORITY = 0x1771; // 6001
/** InvalidTokenGroupMemberMint: Invalid Token group member mint */
export const WEN_NEW_STANDARD_ERROR__INVALID_TOKEN_GROUP_MEMBER_MINT = 0x1772; // 6002

export type WenNewStandardError =
  | typeof WEN_NEW_STANDARD_ERROR__INVALID_DELEGATE_AUTHORITY
  | typeof WEN_NEW_STANDARD_ERROR__INVALID_FREEZE_AUTHORITY
  | typeof WEN_NEW_STANDARD_ERROR__INVALID_TOKEN_GROUP_MEMBER_MINT;

let wenNewStandardErrorMessages:
  | Record<WenNewStandardError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  wenNewStandardErrorMessages = {
    [WEN_NEW_STANDARD_ERROR__INVALID_DELEGATE_AUTHORITY]: `Invalid delegate authority.`,
    [WEN_NEW_STANDARD_ERROR__INVALID_FREEZE_AUTHORITY]: `Invalid freeze authority.`,
    [WEN_NEW_STANDARD_ERROR__INVALID_TOKEN_GROUP_MEMBER_MINT]: `Invalid Token group member mint`,
  };
}

export function getWenNewStandardErrorMessage(
  code: WenNewStandardError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (wenNewStandardErrorMessages as Record<WenNewStandardError, string>)[
      code
    ];
  }

  return 'Error message not available in production bundles.';
}
